#!/usr/bin/env python

import sys
import mpi
import Numeric
import time

mpi.init()
rank = mpi.comm_rank()
size = mpi.comm_size()

root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, mpi.get_processor_name())
mpi.barrier()

toProc = [1, 3]

if rank == 0:
    requests = []
    for dst in toProc:
        requests.append(mpi.isend('message #1 for process %d' % dst, dst))
        requests.append(mpi.isend('message #2 for process %d' % dst, dst))
        requests.append(mpi.isend('message #3 for process %d' % dst, dst))
    nTest = 0
    while True:
        nTest += 1
        idx = mpi.testsome(requests)
        if idx is None:
            break
        if len(idx) > 0:
            print "P%d %d requests (%s) completed test %d" % \
                  (rank, len(idx), idx, nTest)
    print "P%d %d tests done" % (rank, nTest)

elif rank in toProc:
    requests = []
    requests.append(mpi.irecv(0))
    requests.append(mpi.irecv(0))
    requests.append(mpi.irecv(0))
    n = 0
    nTest = 0
    while True:
        nTest += 1
        idx, status = mpi.testsome(requests, retStatus=True)
        if idx is None:
            break
        if len(idx) > 0:
            print "P%d %d requests (%s) completed test %d" % \
                  (rank, len(idx), idx, nTest)
            for n in idx:
                obj = mpi.requestExtract(requests[n])
                print "P%d obj=" % rank, obj, "status=",status

    print "P%d %d tests done" % (rank, nTest)
