#!/usr/bin/env python

import sys
import Numeric

from mpy import *

MPY_Init()
rank = MPY_Comm_rank()
size = MPY_Comm_size()

root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, MPY_Get_processor_name())
MPY_Barrier()

toProc = [1,2,3]
numMes = 3

MPY_Buffer_attach(1000)

if rank == root:
    for num in range(numMes):
        for p in toProc:
            msg = "buffered send from %d to %d msg #%d %s" % \
                  (rank, p, num, 'xyz_' * num * p)
            # Send mesg number 1 with control info, all other messages without.
            MPY_Bsend(msg, p, dataType=MPY_PYTHON_STR, ctrl=num==1)
    print "P%d all messages sent in buffered mode" % rank

    # QUESTION: if we just send in buffered mode and do nothing else
    # (eg: no receive, no blocking send, no buffer_detach), then
    # it seems (at least under LAM) that the receivers will never
    # get their messages, and the program will hang.
    # To make it work, it seems we must force LAM to flush its buffers
    # by:
    #  do a blocking send/recv
    #  issue a buffer_detach

    for p in toProc:
        msg = MPY_Recv(p, ctrl=True, dataType=MPY_FLOAT)
        print "P%d received from %d msg='%s'" % (rank, p, msg)
        
elif rank in toProc:
    for num in range(numMes):
        # msg number 1 is preceded by control info and sent using
        # basic MPI types.
        msg= MPY_Recv(root, dataType=MPY_PYTHON_STR, ctrl=num==1)
        print "P%d received from %d msg='%s'" % (rank, root, msg)
    print "P%d all buffered messages received" % rank

    # Send with control info.
    msg = [1,2,3]
    MPY_Bsend(msg, root, ctrl=True, dataType=MPY_FLOAT)
    print "P%d sent to %d '%s'" % (rank, root, msg)

MPY_Buffer_detach()
