#!/usr/bin/env python

import sys
import Numeric

from mpy import *

MPY_Init()
rank = MPY_Comm_rank()
size = MPY_Comm_size()

root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, MPY_Get_processor_name())
MPY_Barrier()

# Output array.
res = Numeric.zeros(5, 'i')

if rank == root:
    # IMPORTANT :  the root participates in the scatter operation,
    # and sends a message to itself.

    # The array whose contents is to be scattered.
    arr = Numeric.array(((1,2,3,4),
                         (5,6,7,8),
                         (9,10,11,12),
                         (13,14,15,16)), 'i')

# Input buffer is not meaningfull for non-root processes.
else:
    arr = None

# Scatter the array (if root), and get chunks in array 'res'.
# The contents of 'arr' will be divided into 'size' chunks. If 'size' does not
# equally divide the total number of element inside 'arr', remaining
# elements will be ignored. If the number of elements inside output array
# 'res' is greater then the chunk size, extra elements will be left
# uninitialized.
res1 = MPY_Scatter(root, arr, dataType=MPY_PYTHON_ARRAY, array=res)
# Repeat, but this time let the function allocate the output array.
res2 = MPY_Scatter(root, arr, dataType=MPY_PYTHON_ARRAY)


print "P%d received res1=\n'%s'" % (rank, res1)
print "P%d received res2, shape=%s typecode=%s =\n'%s'" % \
      (rank, res2.shape, res2.typecode(), res2)

MPY_Finalize()
