#!/usr/bin/env python

import sys
import math

from mpy import *

MPY_Init()
rank = MPY_Comm_rank()
size = MPY_Comm_size()
root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, MPY_Get_processor_name())

MPY_Barrier()

m4 = []
m5 = []
m6 = ''
for k in range(1,4):
    if rank == root:
        b1 = MPY_Bcast(root, [k * 100000] * 3)
        b2 = MPY_Bcast(root, k * 100000)

        buf =[k*math.pi, 'foo bar,' * k]
        b3 = MPY_Bcast(root, buf)
        # Broadcast using basic MPI datatypes.
        m4.append(k)
        m5.append(k*1.0)
        m6 += 'abcd_xyzt-'
        b4 = MPY_Bcast(root, m4,  dataType=MPY_INT)
        b5 = MPY_Bcast(root, m5,  dataType=MPY_FLOAT)
        b6 = MPY_Bcast(root, m6,  dataType=MPY_PYTHON_STR)
    else:
        b1 = MPY_Bcast(root)
        b2 = MPY_Bcast(root)

        b3 = MPY_Bcast(root)
        # Receive using basic MPI datatypes.
        b4 = MPY_Bcast(root, dataType=MPY_INT)
        b5 = MPY_Bcast(root, dataType=MPY_FLOAT)
        b6 = MPY_Bcast(root, dataType=MPY_PYTHON_STR)
        
    print "P%d iteration %d b1=%s b2=%s b3=%s" % (rank, k, b1, b2, b3)
    print "P%d iteration %d b4=%s b5=%s b6=%s" % (rank, k, b4, b5, b6)
    MPY_Barrier()

MPY_Finalize()
