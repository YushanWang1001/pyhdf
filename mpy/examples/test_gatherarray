#!/usr/bin/env python

import sys
import Numeric

from mpy import *

MPY_Init()
rank = MPY_Comm_rank()
size = MPY_Comm_size()
root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, MPY_Get_processor_name())

MPY_Barrier()

if rank == root:
    # IMPORTANT :  the root participates in the gather operation,
    # and sends a message to itself.

    # Each process sends a 4-element integer vector. The vectors are gathered
    # inside matrix 'arr1' of shape (size x 4).
    arr1 = Numeric.zeros((size, 4), 'i')
    # root sends vector 'v1'.
    v1 = Numeric.array(range(rank, rank+4), 'i')
    # Gather vectors from all processes inside 'arr1'.
    MPY_Gather(v1, root, dataType=MPY_PYTHON_ARRAY, array=arr1)
    print "P%d MPY_Gather res1=\n%s" % (rank, arr1)

    # Each process now sends a 2x2 float array. This time we let
    # the function allocate the resulting array itself.
    # The vector sent by root.
    v2 = Numeric.array(((-1.5, 2.5),(-2.5, 1.5)), 'f')
    # Gather vectors from all processes inside 'arr2'.
    arr2 = MPY_Gather(v2, root, dataType=MPY_PYTHON_ARRAY)
    print "P%d MPY_Gather res2=\n%s" % (rank, arr2)

else:
    # Send a 4-element integer vector.
    v1 = Numeric.array(range(2*rank, 2*rank+4), 'i')
    MPY_Gather(v1, root, dataType=MPY_PYTHON_ARRAY)

    # Send a 2x2 float array.
    v2 = Numeric.array(((-rank*10.0, rank*100.0),
                        (rank*100, -rank*10)), 'f')
    MPY_Gather(v2, root, dataType=MPY_PYTHON_ARRAY)

MPY_Finalize()
