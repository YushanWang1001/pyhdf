#!/usr/bin/env python

import sys

from mpy import *

MPY_Init()

rank = MPY_Comm_rank()
size = MPY_Comm_size()

# Create a communicator holding even processes, and another one holding
# odd processes.
worldGroup = MPY_Comm_group(MPY_COMM_WORLD)
comm = MPY_Comm_split(MPY_COMM_WORLD, rank % 2 == 0, rank)
commGroup = MPY_Comm_group(comm)
print "P%d comm members=%s" % \
      (rank, MPY_Group_translate_ranks(commGroup, range(MPY_Group_size(commGroup)),
                                       worldGroup))

tag = 32767                                       
# Group of even processes communicates with group of odd processes. 
# The rank chosen as the local leader is relative to the group which will
# form the local side of the intra-communicator (here 'comm'). The rank chosen
# as the remote leader is relative to the communicator holding both leaders
# (here 'MPY_COMM_WORLD').
#
# When MPY_Intercomm_create() is called to connect the remote side,
# the rank of the local leader on the remote side must map to the the rank
# chosen for the remote leader of the local side. Similarly, the rank of the
# remote leader on the remote side must map to that of the local leader on the
# local side.
#
# For ex., 3 is chosen as the remote leader rank on the first call to
# MPY_Intercomm_create(). Rank 3 maps to rank 1 in the odd processes group.
# So 1 is used as the local leader on the second call to MPY_Intercomm_create().
# 0 is used as the local leader rank in the first call. This rank is relative
# to the even processes group, and maps to 0 in the world group. So 0
# is used as the remote leader rank on the second call.
if rank % 2 == 0:
    interComm = MPY_Intercomm_create(comm, 0, MPY_COMM_WORLD, 3, tag)
# Group of odd processes communicate with group of even processes. 
# Reverse the role of the local and remote leaders. 
else:
    interComm = MPY_Intercomm_create(comm, 1, MPY_COMM_WORLD, 0, tag)
    

print "P%d comm is an inter-comm=%d interComm is an inter-comm=%d" % \
      (rank, MPY_Comm_test_inter(comm), MPY_Comm_test_inter(interComm))

localGroup  = MPY_Comm_group(interComm)
remoteGroup = MPY_Comm_remote_group(interComm)
localSize   = MPY_Comm_size(interComm)
remoteSize  = MPY_Comm_remote_size(interComm)
print "P%d local side size=%d group=%s remote size=%d group=%s" % \
      (rank, localSize,
       MPY_Group_translate_ranks(localGroup,  range(localSize),  worldGroup),
       remoteSize,
       MPY_Group_translate_ranks(remoteGroup, range(remoteSize), worldGroup))

# Merge two groups into a new communicator, even members first.
mergeComm  = MPY_Intercomm_merge(interComm, rank % 2 != 0)
mergeGroup = MPY_Comm_group(mergeComm)
print "P%d merged members=%s" % \
      (rank, MPY_Group_translate_ranks(mergeGroup, range(MPY_Group_size(mergeGroup)),
                                       worldGroup))


MPY_Finalize()
