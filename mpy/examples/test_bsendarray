#!/usr/bin/env python

import sys
import Numeric

from mpy import *

MPY_Init()
rank = MPY_Comm_rank()
size = MPY_Comm_size()

root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, MPY_Get_processor_name())
MPY_Barrier()

toProc = [1,2,3]

MPY_Buffer_attach(1000)

if rank == root:
    for p in toProc:
        arr = Numeric.zeros((p, p), 'f')
        MPY_Bsend(arr, p, dataType=MPY_PYTHON_ARRAY)
        print "P%d sent to %d\n%s" % (rank, p, arr)

    # QUESTION: if we just send in buffered mode and do nothing else
    # (eg: no receive, no blocking send, no buffer_detach), then
    # it seems (at least under LAM) that the receivers will never
    # get their messages, and the program will hang.
    # To make it work, it seems we must force LAM to flush its buffers
    # by:
    #  do a blocking send/recv
    #  issue a buffer_detach

    for p in toProc:
        # Parameter 'arrInfo' is set to true because it is also set to true
        # in the matching send. A private message is received allowing the
        # allocation of an array matching the one coming from the sender. 
        msg = MPY_Recv(p, dataType=MPY_PYTHON_ARRAY, arrInfo=True)
        print "P%d received from %d msg=\n%s" % (rank, p, msg)
        
elif rank in toProc:
    arr = Numeric.zeros((rank, rank), 'f')
    msg= MPY_Recv(root, dataType=MPY_PYTHON_ARRAY, array=arr)
    print "P%d received from %d msg=\n%s" % (rank, root, msg)

    arr = Numeric.ones((rank, rank), 'i')
    # Parameter 'arrInfo' is set so that the receiver receives enough info
    # to allocate an array of the proper shape and type.
    MPY_Bsend(arr, root, dataType=MPY_PYTHON_ARRAY, arrInfo=True)
    print "P%d sent to %d\n%s" % (rank, root, arr)

MPY_Buffer_detach()
