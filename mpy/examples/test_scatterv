#!/usr/bin/env python

import sys

from mpy import *

MPY_Init()
rank = MPY_Comm_rank()
size = MPY_Comm_size()

root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, MPY_Get_processor_name())
MPY_Barrier()

# Scatter using MPI datatypes.
if rank == root:
    # IMPORTANT :  the root participates in the scatter operation,
    # and sends a message to itself.

    # Scattered messages can be of different lengths.
    # Set argument 'ctrl' to True to inform the receiving processes of
    # the length of the messages sent to them.
    msgSeq = []
    for k in range(size):
        msgSeq.append(range(k, 5*k+2))
    res = MPY_Scatterv(root, msgSeq, ctrl=True, dataType=MPY_FLOAT)
else:
    res = MPY_Scatterv(root, ctrl=True, dataType=MPY_FLOAT)

print "P%d received '%s'" % (rank, res)
MPY_Barrier()

# Now we use default dataType MPY_PYTHON_OBJ. 
if rank == root:
    msgSeq = [[1,2,3,'a'], [100,200,300,'ab'], "scatterv test", "a long long string"]
    res = MPY_Scatterv(root, msgSeq, ctrl=True)
else:
    res = MPY_Scatterv(root, ctrl=True)

print "P%d received '%s'" % (rank, res)
MPY_Barrier()

MPY_Finalize()
