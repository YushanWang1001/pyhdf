#!/usr/bin/env python

import sys
import Numeric

from mpy import *

MPY_Init()
rank = MPY_Comm_rank()
size = MPY_Comm_size()
root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, MPY_Get_processor_name())

MPY_Barrier()

if rank == root:
    # IMPORTANT :  the root participates in the gather operation,
    # and sends a message to itself.

    # Results will be gathered inside this array.
    # Even processes send 2 rows of numbers, odd processes send one row.
    # Each row counts 3 integers.
    nRows = 0
    for i in range(size):
        if i % 2 == 0:
            nRows += 2
        else:
            nRows += 1
    res = Numeric.zeros((nRows,3), 'i')
    # root sends 2 rows.
    v1 = Numeric.array(((1,2,3),(3,4,5)), 'i')
    res1 = MPY_Gatherv(v1, root, dataType=MPY_PYTHON_ARRAY, array=res)
    print "P%d gatherv res1=\n%s" % (rank, res1)

    # We now repeat the gather, this time letting the function allocate
    # the output array. Data elements will be returned inside a one-dimensional
    # array, which the caller can reshape to suit its needs.
    res2 = MPY_Gatherv(v1, root, dataType=MPY_PYTHON_ARRAY)
    print "P%d gatherv res2=\n%s" % (rank, res2)

else:
    if rank % 2 != 0:   # Odd processes send one row
        v1 = Numeric.array(((rank,rank+1,rank+2)), 'i')
    else:               # Even processes send 2 rows
        v1 = Numeric.array(((rank,rank+1,rank+2), (
            10*rank, 10*rank+1, 10*rank+2)), 'i')

    MPY_Gatherv(v1, root, dataType=MPY_PYTHON_ARRAY)

    # Repeat the gather.
    MPY_Gatherv(v1, root, dataType=MPY_PYTHON_ARRAY)

MPY_Finalize()
