#!/usr/bin/env python

import sys
import mpi
import Numeric

mpi.init()
rank = mpi.comm_rank()
size = mpi.comm_size()

root = 0

print "I am P%d of %d on node %s" % \
      (rank, size, mpi.get_processor_name())
mpi.barrier()

toProc = [1,2,3]
numMes = 3

if rank == root:
    requests = []
    for num in range(numMes):
        for p in toProc:
            msg = "from %d to %d msg #%d" % (rank, p, num)
            requests.append(mpi.isend(msg, p))
            print "P%d immediate send mes #%d to %d" % (rank, num, p)
    while True:
        idx = mpi.waitany(requests)
        if idx is None:
            break
        print "P%d request %d complete" % (rank, idx)
    

elif rank in toProc:
    requests = []
    for num in range(numMes):
        requests.append(mpi.irecv(root))
    # Cancel 2nd request.
    mpi.cancel(requests[1])
    nTest = 0
    while True:
        nTest += 1
        flag, idx, status = mpi.testany(requests, retStatus=True)
        if not flag:
            continue
        if idx is None:
            break
        if mpi.test_cancelled(status):
            print "P%d request %d cancelled" % (rank, idx)
        else:
            print "P%d request %d complete status=%s" % (rank, idx, status)
            msg = mpi.requestExtract(requests[idx])
            print "P%d after %d tests got from %d msg='%s'" % \
                  (rank, nTest, status.source, msg)
        nTest = 0
    
