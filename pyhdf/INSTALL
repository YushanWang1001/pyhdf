================
Installing pyhdf
================

``pyhdf`` has been successfully installed under Python 2.4 and above on
several platforms, including Linux 2.4.19, Tru64 4.0.f, Solaris 8,
AIX 4 and MacOSX 10.5.

Please inform the maintainer (Andre.Gosselin@dfo-mpo.gc.ca) of any
problems encountered during installation.

Download
--------
The source repository is located at

::

  https://pysclint.svn.sourceforge.net/svnroot/pysclint/trunk/pyhdf

Binaries and source tarballs can be downloaded from the `SourceForge
project page <http://www.sourceforge.net/projects/pysclint>`_.

Step-by-step instructions
-------------------------

1. **Install the HDF4 library.**

   Source code is available at
   http://hdf.ncsa.uiuc.edu/hdf4.html. Binary packages
   are available for most popular environments.  Version
   4.2r1 or greater is required.

   HDF4.2 itself depends on libjpeg and libz (and optionally libsz for
   SZIP compression).

2. **Install NumPy.**

   See http://www.scipy.org for more detail.  Binary packages
   are available for most distributions.

3. **Compile and install pyhdf**

   1. Change to the ``pyhdf`` source directory.

   2. If your HDF4 libraries or include files reside in directories
      that are not searched by default on your system,
      the installation script will complain about missing files.

      Add to the search path by exporting ``INCLUDE_DIRS`` and
      ``LIBRARY_DIRS``, e.g.::

        export INCLUDE_DIRS="/usr/local/hdf-4.2r1/include"
        export LIBRARY_DIRS="/usr/local/hdf-4.2r1/lib"

        (or SET INCLUDE_DIRS="C:\\hdf4" on Windows)

      In case szlib is not available, also set ``NO_SZIP``::

        export NO_SZIP=1

      If anything goes wrong, read the detailed notes below.
      Warning messages about implicit declarations of some functions
      may be produced.  Those are due to SWIG, and may be safely
      ignored.

   3. Install system-wide or locally:

      # sudo python setup.py install
      $ python setup.py install --prefix=/usr/local (or prefix of choice)

To make sure everything works as expected, run the ``hdfstruct.py``
script (under ``examples/hdfstruct``) on one of your HDF4 files. The
script should display the file structure. This is a handy tool to have
around when you want to explore the contents of any HDF4 file.

Enjoy!

Further notes
-------------

External libraries
~~~~~~~~~~~~~~~~~~
HDF4.2 no longer provides its own copies of the jpeg and z libraries.
Those must be installed separately (on Linux, they should be part of
any standard distribution).

The sz library (versions 2.0 or higher) must be installed if the SZIP
compression method is to be used with SDsetcompress(). HDF v4.2 must
also then be compiled with SZIP support. Precompiled HDF packages
usually lack this feature. Getting an SZIP enabled HDF library may
require compiling the library from source with the "--with-szlib"
configuration option.  Note that you *must* install SZIP in a separate
step. For more details, see the
`NCSA hdf site <http://hdf.ncsa.uiuc.edu/doc_resource/SZIP/>`_.
Source code and binaries are
`available for download <ftp://ftp.hdfgroup.org/lib-external/szip/>`_.

In case your HDF library was compiled without SZIP support, or you cannot
abide by the szip licensing terms, set the ``szip_installed`` variable
inside 'setup.py' to ``False``.

If you get error messages related to the ``SDgetcompress()`` /
``SDsetcompress()`` functions, e.g. ``"undefined symbol:
SDgetcompress"``, set the environment variable ``NO_COMPRESS`` to "1".
This will transform ``SDgetcompress()`` and ``SDsetcompress()`` into
no-ops, which will immediately raise an exception, and will not be
resolved against the HDF library symbols. This may make it possible to
work with an HDF library earlier than v4.2.

Swig-generated interface files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Interface files ``hdfext.py`` and ``hdfext_wrap.c`` (located under the
``pyhdf`` subdirectory) have been generated using the SWIG tool.
Those two files should be usable as is on most environments.  It could
happen however that, for reasons related to your environment, your C
compiler does not accept the '.c' file and raises a compilation
error. If so, the interface needs to be regenerated.  To do so,
install `SWIG <http://www.swig.org>`_, then run::

  $ cd pyhdf
  $ swig -python hdfext.i

SWIG should silently regenerate the two interface files, after which
installation should proceed correctly.

TRU64 note
~~~~~~~~~~
The HDF installation creates its libraries as archive (.a) files,
not shareable (.so) ones. On TRU64, the linker by default first looks
for shareable libraries in every directory, then in a second round
for archive files. This means that if there is a libjpeg.so somewhere
on the standard linker search paths, it will be found first, even if
the HDF libjpeg.a file exists in the directory pointed by "library_dirs".
To solve the problem, set the environment variable ``LINK_ARGS``::

  export LINK_ARGS="-oldstyle_liblookup"

This will tell the linker to look for .so then for .a files in each visited
directory.
